use proc_macro2::TokenStream;
use serde::Deserialize;
use std::collections::HashMap;
use std::fs;
use syn::__private::quote::{format_ident, quote};

#[derive(Deserialize)]
struct Config {
    elements: HashMap<String, Element>,
    derives: Option<HashMap<String, Derivable>>,
}

#[derive(Deserialize, Clone)]
struct Derivable {
    fields: HashMap<String, Field>,
}

#[derive(Deserialize)]
struct Element {
    derives: Option<Vec<String>>,
    fields: HashMap<String, Field>,
    #[serde(default)]
    constructor_params: Vec<Param>,
}

#[derive(Deserialize, Clone)]
struct Param {
    name: String,
    #[serde(rename = "type")]
    param_type: String,
}

#[derive(Deserialize, Clone)]
struct Field {
    #[serde(rename = "type")]
    field_type: String,
    from_constructor: Option<bool>,
}

fn main() {
    println!("cargo:rerun-if-changed=svg_elements.yml");

    let yaml_content =
        fs::read_to_string("svg_elements.yml").expect("Failed to read svg_elements.yml");
    let mut config: Config = serde_yaml::from_str(&yaml_content).expect("Failed to parse YAML");

    if let Some(derives) = &config.derives {
        for element in config.elements.values_mut() {
            if let Some(element_derives) = &element.derives {
                for derive_name in element_derives {
                    if let Some(derivable) = derives.get(derive_name) {
                        for (field_name, field) in &derivable.fields {
                            element.fields.insert(field_name.clone(), field.clone());
                        }
                    }
                }
            }
        }
    }

    let mut generated_code = String::new();
    generated_code.push_str(
        r#"// @generated
// This file is automatically generated by build.rs
use crate::color::Color;
use serde::{Deserialize, Serialize};
use std::fmt::Display;"#,
    );

    generated_code.push_str(generate_shape_enum(&config).as_str());

    for (element_name, element) in &config.elements {
        generated_code.push_str(&generate_struct(element_name, element));
        generated_code.push_str(&generate_impl(element_name, element));
        generated_code.push_str(&generate_to_string(element_name, element));
        generated_code.push_str(&generate_shape_from(element_name));
    }

    fs::write("src/generated.rs", format_rust_code(&generated_code)).unwrap();
}

fn generate_shape_from(element_name: &String) -> String {
    let struct_name = capitalize(element_name);

    let struct_name_ident = format_ident!("{}", &struct_name);
    let element_name_ident = format_ident!("{}", &element_name);

    let expanded = quote! {
        impl From<#struct_name_ident> for Shape {
            fn from(#element_name_ident: #struct_name_ident) -> Self {
                Self::#struct_name_ident(#element_name_ident)
            }
        }
    };
    expanded.to_string()
}

fn generate_shape_enum(config: &Config) -> String {
    let enum_variants = config.elements.iter().map(|(element_name, _)| {
        let struct_name_str = capitalize(element_name);
        let struct_name_ident = format_ident!("{}", struct_name_str);
        quote! {
            #struct_name_ident(#struct_name_ident)
        }
    });

    let display_match_arms = config.elements.iter().map(|(element_name, _)| {
        let struct_name_str = capitalize(element_name);
        let struct_name_ident = format_ident!("{}", struct_name_str);
        let element_name_ident = format_ident!("{}", element_name);

        quote! {
            Shape::#struct_name_ident(#element_name_ident) => #element_name_ident.to_string()
        }
    });

    let expanded = quote! {
        #[derive(Debug, Clone, Serialize, Deserialize)]
        #[serde(tag = "type")]
        pub enum Shape {
            #( #enum_variants ),*
        }

        impl Display for Shape {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                let display_str = match self {
                    #( #display_match_arms ),*
                };
                write!(f, "{}", display_str)
            }
        }
    };
    expanded.to_string()
}
fn generate_struct(name: &str, element: &Element) -> String {
    let struct_name = capitalize(name);
    let mut fields = Vec::new();

    for (field_name, field) in &element.fields {
        let field_name_ident = format_ident!("{}", &field_name);
        let field_type_tokens: TokenStream = field
            .field_type
            .parse()
            .expect("Failed to parse field type");
        fields.push(quote! {
            pub #field_name_ident: #field_type_tokens
        });
    }

    let struct_name_ident = format_ident!("{}", struct_name);

    let expanded = quote! {
    #[derive(Debug, Clone, Serialize, Deserialize)]
     pub struct #struct_name_ident {
           #( #fields ),*
         }
     };

    expanded.to_string()
}

fn generate_to_string(name: &str, element: &Element) -> String {
    let struct_name = capitalize(name);
    let mut generated_code = String::new();
    generated_code.push_str(format!("impl Display for {} {{\n", struct_name).as_ref());
    generated_code
        .push_str("    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n");

    let required_parameters = element
        .constructor_params
        .iter()
        .map(|param| format!("{}=\"{{}}\" ", param.name))
        .collect::<String>();

    let required_arguments = element
        .constructor_params
        .iter()
        .map(|param| format!("self.{},", param.name))
        .collect::<String>();

    generated_code.push_str(&format!(
        "let mut svg =format!(r#\"<{}{}\"#,\n{});",
        name, required_parameters, required_arguments
    ));

    for (field_name, field) in &element.fields {
        if let Some(from_constructor) = field.from_constructor
            && from_constructor
        {
            continue;
        }
        generated_code.push_str(&format!(
            "if let Some({}) = &self.{} {{",
            field_name, field_name
        ));
        generated_code.push_str(&format!(
            "svg.push_str(&format!(r#\" {}=\"{{}}\"\"#, {}));",
            field_name, field_name
        ));
        generated_code.push_str("}")
    }
    generated_code.push_str(r#"svg.push_str("/>");"#);

    generated_code.push_str(r#"write!(f, "{}", svg)"#);
    generated_code.push_str("}}");
    generated_code
}
fn generate_impl(name: &str, element: &Element) -> String {
    let struct_name = capitalize(name);
    let mut code = format!("impl {} {{\n", struct_name);

    code.push_str(&generate_constructor(element));

    for (field_name, field) in &element.fields {
        if !field.from_constructor.unwrap_or(false) {
            code.push_str(&generate_builder_method(field_name, field));
        }
    }

    code.push_str("}\n\n");
    code
}

fn generate_constructor(element: &Element) -> String {
    let params: Vec<String> = element
        .constructor_params
        .iter()
        .map(|p| format!("{}: {}", p.name, p.param_type))
        .collect();

    let mut field_assignments = Vec::new();
    for (field_name, field) in &element.fields {
        if field.from_constructor.unwrap_or(false) {
            field_assignments.push(format!("            {},", field_name));
        } else {
            field_assignments.push(format!("            {}: None,", field_name));
        }
    }

    format!(
        "    pub fn new({}) -> Self {{\n        Self {{\n{}\n        }}\n    }}\n\n",
        params.join(", "),
        field_assignments.join("\n")
    )
}

fn generate_builder_method(field_name: &str, field: &Field) -> String {
    // Extract inner type from Option<T>
    let param_type = if field.field_type.starts_with("Option<") {
        &field.field_type[7..field.field_type.len() - 1]
    } else {
        &field.field_type
    };

    format!(
        "    pub fn {}(mut self, value: {}) -> Self {{\n        self.{} = Some(value);\n        self\n    }}\n\n",
        field_name, param_type, field_name
    )
}

fn capitalize(s: &str) -> String {
    let mut chars = s.chars();
    match chars.next() {
        None => String::new(),
        Some(first) => first.to_uppercase().collect::<String>() + chars.as_str(),
    }
}
fn format_rust_code(code: &str) -> String {
    match syn::parse_file(code) {
        Ok(syntax_tree) => prettyplease::unparse(&syntax_tree),
        Err(e) => {
            println!("cargo:warning=Failed to parse generated code: {}", e);
            println!("cargo:warning=Using unformatted code");
            code.to_string()
        }
    }
}
