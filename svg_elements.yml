attributes:
  fill:
    elements: [ "Rect", "Circle" ]
    type: "Option<Color>"
  x:
    elements: [ "Rect" ]
    type: "Option<f64>"


derives:
  Element:
    derives: [ "Node", "EventTarget" ]
    fields:
      className: { type: "Option<String>" }
      elementTiming:
        type: "Option<String>"
        is_experimental: true
      id: { type: "Option<String>" }
      innerHtml: { type: "Option<String>" }
      outerHtml: { type: "Option<String>" }
      #      part: {type: ""}
      scrollLeft: { type: "Option<f64>" }
      scrollTop: { type: "Option<f64>" }
      slot: { type: "Option<String>" }
  EventTarget:
    derives: [ ]
    fields: { }
  Node:
    derives: [ ]
    fields:
      #      node: {}
      textContent: { type: "Option<String>" }
  SVGDefsElement:
    derives: [ "SVGGraphicsElement" ]
    fields: { }
  SVGDescElement:
    derives: [ "SVGElement" ]
    fields: { }
  SVGGeometryElement:
    derives: [ "SVGGraphicsElement" ]
    fields: { }
  SVGGraphicsElement:
    derives: [ "SVGElement" ]
    fields: { }
  SVGElement:
    derives: [ "Element" ]
    fields:
      autofocus: { type: "Option<bool>" }
      nonce: { type: "Option<String>" }
      style: { type: "Option<String>" } #typed css?
      tabIndex: { type: "Option<i32>" }





element_types:
  AnimationElement: { }
  BasicShape: { }
  ContainerElement: { }
  DescriptiveElement: { }
  FilterPrimitiveElement: { }
  GradientElement: { }
  GraphicsElement: { }
  GraphicsReferencingElement: { }
  LightSourceElement: { }
  NeverRenderedElement: { }
  PaintServerElement: { }
  RenderableElement: { }
  ShapeElement: { }
  StructuralElement: { }
  TextContentElement: { }
  TextContentChildElement: { }
  UncategorizedElement: { }


elements:
  #TODO(effdotsh): Commenting out for not fields that take either vectors or some special types while creating a better system. These need to be added
  a:
    element_types: [ "ContainerElement" ]
    derives: [ ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement", "ShapeElement", "StructuralElement", "GradientElement", "Rect" ]
    fields: {
      download: { type: "Option<String>" },
      href: { type: "Option<String>" },
      hreflang: { type: "Option<String>" },
      #      ping: { type: "Option<Vec<String>>", is_experimental: true },
      referrerpolicy: { type: "Option<String>" },
      # rel: { type: "Option<Vec<String>>" },
      target: { type: "Option<Target>" },
      #      todo(effdotsh): "type" is conflicting with the type keyword
      #      type: { type: "Option<String>" }
      #      "xlink:href": { type: "Option<String>", is_deprecated: "true" }
    }
  #  animate:
  #    element_types: [ "AnimationElement" ]
  #    derives: [ ]
  #    valid_child_types: [ "AnimationElement", "DescriptiveElement", "ShapeElement", "StructuralElement", "GradientElement", "Rect" ]
  #    fields: {
  #
  #    }
  animateMotion:
    element_types: [ "AnimationElement" ]
    derives: [ ]
    valid_child_types: [ "DescriptiveElement",
      #                         "Mpath",
    ]
    fields: {
      keyPoints: { type: "Option<f64>" },
      path: { type: "Option<String>" },
      #      rotate: {type: "Option<Rotate>"}
    }
  #  animateTransform:
  #    element_types: [ "AnimationElement" ]
  #    derives: [ ]
  #    valid_child_types: [ "DescriptiveElement", ]
  #    fields: { }

  circle:
    element_types: [ "BasicShape" ]
    derives: [ "SVGGeometryElement" ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement" ]
    fields:
      cx: { type: "Option<f64>" }
      cy: { type: "Option<f64>" }
      r: { type: "Option<f64>" }

  #  clipPath:
  #    elementType: [ "NeverRenderedElement", "UncategorizedElement" ]
  #    derived: [ ]
  #    valid_child_types: [ "AnimationElement", "DescriptiveElement", "ShapeElement",
  #      #                         "Text", "Use",
  #    ]
  #    fields:
  ##      clipPathUnits: {}

  defs:
    element_types: [ "BasicShape" ]
    derives: [ "SVGDefsElement" ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement", "ShapeElement", "StructuralElement",        "A",
      #                         "ClipPath",
      #                         "Filter",
      #                         "ForeignObject",
      #                         "Image",
      #                         "Marker",
      #                         "Mask",
      #                         "Pattern",
      #                         "Script",
      #                         "Style",
      #                         "Switch",
      #                         "Text",
      #                         "View",
    ]
    fields:
      width: { type: "Option<f64>" }
      height: { type: "Option<f64>" }

  desc:
    element_types: [ "DescriptiveElement" ]
    derives: [ "SVGDescElement" ]
    valid_child_types: [ "AnimationElement",
                         "BasicShape",
                         "ContainerElement",
                         "DescriptiveElement",
                         "FilterPrimitiveElement",
                         "GradientElement",
                         "GraphicsElement",
                         "GraphicsReferencingElement",
                         "LightSourceElement",
                         "NeverRenderedElement",
                         "PaintServerElement",
                         "RenderableElement",
                         "ShapeElement",
                         "StructuralElement",
                         "TextContentElement",
                         "TextContentChildElement",
                         "UncategorizedElement", ]
    fields: { }

  rect:
    element_types: [ "BasicShape" ]
    derives: [ "SVGGeometryElement" ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement" ]
    fields:
      width: { type: "Option<f64>" }
      height: { type: "Option<f64>" }
