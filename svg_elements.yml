attributes:
  #  accumulate: { }
  #  additive: { }
  #  alignment-baseline: { }
  #  amplitude: { }
  #  attributeName: { }
  #  attributeType: { }
  #  azimuth: { }
  #  baseFrequency: { }
  #  baseline-shift: { }
  #  baseProfile: { }
  #  begin: { }
  #  bias: { }
  #  by: { }
  #  calcMode: { }
  #  class: { }
  #  clip: { }
  #  clipPathUnits: { }
  #  clip-path: { }
  #  clip-rule: { }
  #  color: { }
  #  color-interpolation: { }
  #  color-interpolation-filters: { }
  #  crossorigin: { }
  #  cursor: { }
  #  cx: { }
  #  cy: { }
  #  d: { }
  #  data-*: { }
  #  decoding: { }
  #  diffuseConstant: { }
  #  direction: { }
  #  display: { }
  #  divisor: { }
  #  dominant-baseline: { }
  #  dur: { }
  #  dx: { }
  #  dy: { }
  #  edgeMode: { }
  #  elevation: { }
  #  end: { }
  #  exponent: { }
  #  fetchpriority: { }
  fill:
    type: "Option<Color>"
    elements:
      - circle
      - ellipse
      - path
      #      - polygon
      #      - polyline
      - rect
      - text
      #      - textPath
      #      - tspan
      #      - animate
    #      - animateMotion
    #      - animateTransform
    #      - set
  fill-opacity:
    type: "Option<f64>"
    elements:
      - circle
      #      - ellipse
      - path
      #      - polygon
      #      - polyline
      - rect
      - text
    #      - textPath
    #      - tspan

  #  fill-rule: { }
  #  filter: { }
  #  filterUnits: { }
  #  flood-color: { }
  #  flood-opacity: { }
  font-family:
    type: "Option<String>"
    elements:
      - text
    #        - textPath
    #        - tSpan
  font-size:
    type: "Option<String>"
    elements:
      - text
  #        - textPath
  #        - tSpan
  font-size-adjust:
    type: "Option<f64>"
    elements:
      - text
    #        - textPath
    #        - tSpan
  #  font-stretch: { }
  #  font-style: { }
  #  font-variant: { }
  #  font-weight: { }
  #  fr: { }
  #  from: { }
  #  fx: { }
  #  fy: { }
  #  glyph-orientation-horizontal: { }
  #  glyph-orientation-vertical: { }
  #  gradientTransform: { }
  #  gradientUnits: { }
  #  height: { }
  #  href: { }
  #  hreflang: { }
  #  id: { }
  #  image-rendering: { }
  #  in: { }
  #  in2: { }
  #  intercept: { }
  #  k1: { }
  #  k2: { }
  #  k3: { }
  #  k4: { }
  #  kernelMatrix: { }
  #  kernelUnitLength: { }
  #  keyPoints: { }
  #  keySplines: { }
  #  keyTimes: { }
  #  lang: { }
  #  lengthAdjust: { }
  #  letter-spacing: { }
  #  lighting-color: { }
  #  limitingConeAngle: { }
  #  marker-end: { }
  #  marker-mid: { }
  #  marker-start: { }
  #  markerHeight: { }
  #  markerUnits: { }
  #  markerWidth: { }
  #  mask: { }
  #  maskContentUnits: { }
  #  maskUnits: { }
  #  max: { }
  #  media: { }
  #  method: { }
  #  min: { }
  #  mode: { }
  #  numOctaves: { }
  #  offset: { }
  #  opacity: { }
  #  operator: { }
  #  order: { }
  #  orient: { }
  #  origin: { }
  #  overflow: { }
  #  paint-order: { }
  #  path: { }
  #  pathLength: { }
  #  patternContentUnits: { }
  #  patternTransform: { }
  #  patternUnits: { }
  #  ping: { }
  #  pointer-events: { }
  #  points: { }
  #  pointsAtX: { }
  #  pointsAtY: { }
  #  pointsAtZ: { }
  #  preserveAlpha: { }
  #  preserveAspectRatio: { }
  #  primitiveUnits: { }
  #  r: { }
  #  radius: { }
  #  referrerPolicy: { }
  #  refX: { }
  #  refY: { }
  #  rel: { }
  #  repeatCount: { }
  #  repeatDur: { }
  #  requiredExtensions: { }
  #  requiredFeatures: { }
  #  restart: { }
  #  result: { }
  #  rotate: { }
  #  rx: { }
  #  ry: { }
  #  scale: { }
  #  seed: { }
  #  shape-rendering: { }
  #  side: { }
  #  slope: { }
  #  spacing: { }
  #  specularConstant: { }
  #  specularExponent: { }
  #  spreadMethod: { }
  #  startOffset: { }
  #  stdDeviation: { }
  #  stitchTiles: { }
  #  stop-color: { }
  #  stop-opacity: { }
  stroke:
    type: "Option<Color>"
    elements:
      - circle
      - ellipse
      - line
      - path
      # - polygon
      # - polyline
      - rect
      - text
      # - textPath
      # - tspan
  #  stroke-dasharray: { }
  #  stroke-dashoffset: { }
  #  stroke-linecap: { }
  #  stroke-linejoin: { }
  #  stroke-miterlimit: { }
  #  stroke-opacity: { }
  stroke-width:
    type: "Option<f64>"
    elements:
      - circle
      #        - ellipse
      #        - line
      - path
      #        - polygon
      #        - polyline
      - rect
      - text
      #- textPath
      #- tspan
  #  style: { }
  #  surfaceScale: { }
  #  systemLanguage: { }`
  #  tabindex: { }
  #  tableValues: { }
  #  target: { }
  #  targetX: { }
  #  targetY: { }
  #  text-anchor: { }
  #  text-decoration: { }
  #  text-rendering: { }
  #  textLength: { }
  #  to: { }
  #  transform: { }
  #  transform-origin: { }
  #  type: { }
  #  unicode-bidi: { }
  #  values: { }
  #  vector-effect: { }
  #  version: { }
  #  viewBox: { }
  #  visibility: { }
  #  width: { }
  #  word-spacing: { }
  #  writing-mode: { }
  x:
    elements: [ "rect" ]
    type: "Option<f64>"
#  x1: { }
#  x2: { }
#  xChannelSelector: { }
#  xlink:actuate: { }
#  xlink:arcrole: { }
#  xlink:href: { }
#  xlink:role: { }
#  xlink:show: { }
#  xlink:title: { }
#  xlink:type: { }
#  xml:lang: { }
#  xml:space: { }
#  y: { }
#  y1: { }
#  y2: { }
#  yChannelSelector: { }
#  z: { }
#  zoomAndPan: { }



derives:
  Element:
    derives: [ "Node", "EventTarget" ]
    fields:
      className: { type: "Option<String>" }
      elementTiming:
        type: "Option<String>"
        is_experimental: true
      id: { type: "Option<String>" }
      innerHtml: { type: "Option<String>" }
      outerHtml: { type: "Option<String>" }
      #      part: {type: ""}
      scrollLeft: { type: "Option<f64>" }
      scrollTop: { type: "Option<f64>" }
      slot: { type: "Option<String>" }
  EventTarget:
    derives: [ ]
    fields: { }
  Node:
    derives: [ ]
    fields: { }
    #      node: {}
  #      textContent: { type: "Option<String>" }
  SVGDefsElement:
    derives: [ "SVGGraphicsElement" ]
    fields: { }
  SVGDescElement:
    derives: [ "SVGElement" ]
    fields: { }
  SVGElement:
    derives: [ "Element" ]
    fields:
      autofocus: { type: "Option<bool>" }
      nonce: { type: "Option<String>" }
      style: { type: "Option<String>" } #typed css?
      tabIndex: { type: "Option<i32>" }
  SVGGeometryElement:
    derives: [ "SVGGraphicsElement" ]
    fields: { }
  SVGGraphicsElement:
    derives: [ "SVGElement" ]
    fields: { }
  SVGLineElement:
    derives: [ "SVGGeometryElement" ]
    fields: { }
  SVGPathElement:
    derives: [ "SVGGeometryElement" ]
    fields: { }
  SVGTextContentElement:
    derives: [ "SVGGraphicsElement" ]
    fields:
      textLength: { type: "Option<f64>" }
      lengthAdjust: { type: "Option<String>" }





element_types:
  AnimationElement: { }
  BasicShape: { }
  ContainerElement: { }
  DescriptiveElement: { }
  FilterPrimitiveElement: { }
  GradientElement: { }
  GraphicsElement: { }
  GraphicsReferencingElement: { }
  LightSourceElement: { }
  NeverRenderedElement: { }
  PaintServerElement: { }
  RenderableElement: { }
  ShapeElement: { }
  StructuralElement: { }
  TextContentElement: { }
  TextContentChildElement: { }
  UncategorizedElement: { }


elements:
  #TODO(effdotsh): Commenting out for not fields that take either vectors or some special types while creating a better system. These need to be added
  a:
    element_types: [ "ContainerElement" ]
    derives: [ ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement", "ShapeElement", "StructuralElement", "GradientElement", "Rect" ]
    fields: {
      download: { type: "Option<String>" },
      href: { type: "Option<String>" },
      hreflang: { type: "Option<String>" },
      #      ping: { type: "Option<Vec<String>>", is_experimental: true },
      referrerpolicy: { type: "Option<String>" },
      # rel: { type: "Option<Vec<String>>" },
      target: { type: "Option<Target>" },
      #      todo(effdotsh): "type" is conflicting with the type keyword
      #      type: { type: "Option<String>" }
      #      "xlink:href": { type: "Option<String>", is_deprecated: "true" }
    }
  #  animate: {}
  #  animateMotion: {}
  #  animateTransform: {}
  circle:
    element_types: [ "BasicShape", "GraphicsElement", "RenderableElement", "ShapeElement" ]
    derives: [ "SVGGeometryElement" ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement" ]
    fields:
      cx: { type: "Option<f64>" }
      cy: { type: "Option<f64>" }
      r: { type: "Option<f64>" }

  #  clipPath:
  #    elementType: [ "NeverRenderedElement", "UncategorizedElement" ]
  #    derived: [ ]
  #    valid_child_types: [ "AnimationElement", "DescriptiveElement", "ShapeElement",
  #      #                         "Text", "Use",
  #    ]
  #    fields:
  ##      clipPathUnits: {}

  defs:
    element_types: [ "BasicShape" ]
    derives: [ "SVGDefsElement" ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement", "ShapeElement", "StructuralElement",        "A",
      #                         "ClipPath",
      #                         "Filter",
      #                         "ForeignObject",
      #                         "Image",
      #                         "Marker",
      #                         "Mask",
      #                         "Pattern",
      #                         "Script",
      #                         "Style",
      #                         "Switch",
      #                         "Text",
      #                         "View",
    ]
    fields:
      width: { type: "Option<f64>" }
      height: { type: "Option<f64>" }

  desc:
    element_types: [ "DescriptiveElement" ]
    derives: [ "SVGDescElement" ]
    valid_child_types: [ "AnimationElement",
                         "BasicShape",
                         "ContainerElement",
                         "DescriptiveElement",
                         "FilterPrimitiveElement",
                         "GradientElement",
                         "GraphicsElement",
                         "GraphicsReferencingElement",
                         "LightSourceElement",
                         "NeverRenderedElement",
                         "PaintServerElement",
                         "RenderableElement",
                         "ShapeElement",
                         "StructuralElement",
                         "TextContentElement",
                         "TextContentChildElement",
                         "UncategorizedElement", ]
    fields: { }

  ellipse:
    element_types: [ "BasicShape" ]
    derives: [ "SVGGeometryElement" ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement" ]
    fields:
      cx: { type: "Option<f64>" }
      cy: { type: "Option<f64>" }
      rx: { type: "Option<f64>" }
      ry: { type: "Option<f64>" }
      pathLength: { type: "Option<f64>" }

  #  feBlend: { }
  #  feColorMatrix: { }
  #  feComponentTransfer: { }
  #  feComposite: { }
  #  feConvolveMatrix: { }
  #  feDiffuseLighting: { }
  #  feDisplacementMap: { }
  #  feDistantLight: { }
  #  feDropShadow: { }
  #  feFlood: { }
  #  feFuncA: { }
  #  feFuncB: { }
  #  feFuncG: { }
  #  feFuncR: { }
  #  feGaussianBlur: { }
  #  feImage: { }
  #  feMerge: { }
  #  feMergeNode: { }
  #  feMorphology: { }
  #  feOffset: { }
  #  fePointLight: { }
  #  feSpecularLighting: { }
  #  feSpotLight: { }
  #  feTile: { }
  #  feTurbulence: { }
  #  filter: { }
  #  foreignObject: { }
  #  image: { }
  line:
    element_types: [ "BasicShape", "GraphicsElement", "RenderableElement", "ShapeElement" ]
    derives: [ "SVGLineElement" ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement", "TextContentChildElement", "A", "String" ]
    fields:
      x1: { type: "Option<f64>" }
      y1: { type: "Option<f64>" }
      x2: { type: "Option<f64>" }
      y2: { type: "Option<f64>" }
      pathLength: { type: "Option<f64>" }

    #  marker: { }
    #  mask: { }
    #  metadata: { }
    #  mpath: { }
  path:
    element_types: [ "GraphicsElement", "RenderableElement", "ShapeElement" ]
    derives: [ "SVGPathElement" ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement" ]
    fields:
      d: { type: "Option<PathData>" }
      pathLength: { type: "Option<f64>" }

  #  pattern: { }
  #  polygon: { }
  #  polyline: { }
  #  radialGradient: { }
  rect:
    element_types: [ "BasicShape", "GraphicsElement", "RenderableElement", "ShapeElement" ]
    derives: [ "SVGGeometryElement" ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement" ]
    fields:
      x: { type: "Option<f64>" }
      y: { type: "Option<f64>" }
      width: { type: "Option<f64>" }
      height: { type: "Option<f64>" }
      rx: { type: "Option<f64>" }
      ry: { type: "Option<f64>" }
      pathLength: { type: "Option<f64>" }


  #  script: { }
  #  set: { }
  #  stop: { }
  #  style: { }
  svg:
    element_types: [ "ContainerElement", "RenderableElement", "StructuralElement", ]
    derives: [ ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement", "ShapeElement", "StructuralElement", "GradientElement",
                         "A",
      #                         "ClipPath",
      #                         "Filter",
      #                         "ForeignObject",
      #                         "Image",
      #                         "Marker",
      #                         "Mask",
      #                         "Pattern",
      #                         "Script",
      #                         "Style",
      #                         "Switch",
                         "Text",
      #                         "View"
    ]
    fields:
      baseProfile: { type: "Option<String>" }
      height: { type: "Option<f64>" }
      #preserveAspectRatio
      #      viewBox: { type: "Option<Vec<f64>>" }
      width: { type: "Option<f64>" }
      x: { type: "Option<f64>" }
      y: { type: "Option<f64>" }
  #  switch: { }
  #  symbol: { }
  text:
    element_types: [ "TextContentElement" ]
    derives: [ "SVGTextContentElement" ]
    valid_child_types: [ "AnimationElement", "DescriptiveElement", "TextContentChildElement", "A", "String" ]
    fields:
      x: { type: "Option<f64>" }
      y: { type: "Option<f64>" }
      dx: { type: "Option<f64>" }
      dy: { type: "Option<f64>" }
      rotate: { type: "Option<f64>" }
      textLength: { type: "Option<f64>" }
      lengthAdjust: { type: "Option<String>" }
  #  textPath: { }
  #  title: { }
  #  tspan: { }
  #  use: { }
  #  view: { }



