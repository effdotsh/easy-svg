use serde::{Deserialize, Serialize};
use std::fmt::Display;

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub enum Color {
    AliceBlue,
    AntiqueWhite,
    Aqua,
    Aquamarine,
    Azure,
    Beige,
    Bisque,
    Black,
    BlanchedAlmond,
    Blue,
    BlueViolet,
    Brown,
    BurlyWood,
    CadetBlue,
    Chartreuse,
    Chocolate,
    Coral,
    CornflowerBlue,
    Cornsilk,
    Crimson,
    Cyan,
    DarkBlue,
    DarkCyan,
    DarkGoldenRod,
    DarkGray,
    DarkGrey,
    DarkGreen,
    DarkKhaki,
    DarkMagenta,
    DarkOliveGreen,
    DarkOrange,
    DarkOrchid,
    DarkRed,
    DarkSalmon,
    DarkSeaGreen,
    DarkSlateBlue,
    DarkSlateGray,
    DarkSlateGrey,
    DarkTurquoise,
    DarkViolet,
    DeepPink,
    DeepSkyBlue,
    DimGray,
    DimGrey,
    DodgerBlue,
    FireBrick,
    FloralWhite,
    ForestGreen,
    Fuchsia,
    Gainsboro,
    GhostWhite,
    Gold,
    GoldenRod,
    Gray,
    Grey,
    Green,
    GreenYellow,
    HoneyDew,
    HotPink,
    IndianRed,
    Indigo,
    Ivory,
    Khaki,
    Lavender,
    LavenderBlush,
    LawnGreen,
    LemonChiffon,
    LightBlue,
    LightCoral,
    LightCyan,
    LightGoldenRodYellow,
    LightGray,
    LightGrey,
    LightGreen,
    LightPink,
    LightSalmon,
    LightSeaGreen,
    LightSkyBlue,
    LightSlateGray,
    LightSlateGrey,
    LightSteelBlue,
    LightYellow,
    Lime,
    LimeGreen,
    Linen,
    Magenta,
    Maroon,
    MediumAquaMarine,
    MediumBlue,
    MediumOrchid,
    MediumPurple,
    MediumSeaGreen,
    MediumSlateBlue,
    MediumSpringGreen,
    MediumTurquoise,
    MediumVioletRed,
    MidnightBlue,
    MintCream,
    MistyRose,
    Moccasin,
    NavajoWhite,
    Navy,
    OldLace,
    Olive,
    OliveDrab,
    Orange,
    OrangeRed,
    Orchid,
    PaleGoldenRod,
    PaleGreen,
    PaleTurquoise,
    PaleVioletRed,
    PapayaWhip,
    PeachPuff,
    Peru,
    Pink,
    Plum,
    PowderBlue,
    Purple,
    RebeccaPurple,
    Red,
    RosyBrown,
    RoyalBlue,
    SaddleBrown,
    Salmon,
    SandyBrown,
    SeaGreen,
    SeaShell,
    Sienna,
    Silver,
    SkyBlue,
    SlateBlue,
    SlateGray,
    SlateGrey,
    Snow,
    SpringGreen,
    SteelBlue,
    Tan,
    Teal,
    Thistle,
    Tomato,
    Turquoise,
    Violet,
    Wheat,
    White,
    WhiteSmoke,
    Yellow,
    YellowGreen,

    // System colors
    Transparent,
    CurrentColor,

    Rgb(u8, u8, u8),

    Rgba(u8, u8, u8, f32),

    Hsl(u16, u8, u8),

    Hsla(u16, u8, u8, f32),

    Hex(String),

    Custom(String),
}

impl Display for Color {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let str = match &self {
            Color::AliceBlue => "aliceblue",
            Color::AntiqueWhite => "antiquewhite",
            Color::Aqua => "aqua",
            Color::Aquamarine => "aquamarine",
            Color::Azure => "azure",
            Color::Beige => "beige",
            Color::Bisque => "bisque",
            Color::Black => "black",
            Color::BlanchedAlmond => "blanchedalmond",
            Color::Blue => "blue",
            Color::BlueViolet => "blueviolet",
            Color::Brown => "brown",
            Color::BurlyWood => "burlywood",
            Color::CadetBlue => "cadetblue",
            Color::Chartreuse => "chartreuse",
            Color::Chocolate => "chocolate",
            Color::Coral => "coral",
            Color::CornflowerBlue => "cornflowerblue",
            Color::Cornsilk => "cornsilk",
            Color::Crimson => "crimson",
            Color::Cyan => "cyan",
            Color::DarkBlue => "darkblue",
            Color::DarkCyan => "darkcyan",
            Color::DarkGoldenRod => "darkgoldenrod",
            Color::DarkGray => "darkgray",
            Color::DarkGrey => "darkgrey",
            Color::DarkGreen => "darkgreen",
            Color::DarkKhaki => "darkkhaki",
            Color::DarkMagenta => "darkmagenta",
            Color::DarkOliveGreen => "darkolivegreen",
            Color::DarkOrange => "darkorange",
            Color::DarkOrchid => "darkorchid",
            Color::DarkRed => "darkred",
            Color::DarkSalmon => "darksalmon",
            Color::DarkSeaGreen => "darkseagreen",
            Color::DarkSlateBlue => "darkslateblue",
            Color::DarkSlateGray => "darkslategray",
            Color::DarkSlateGrey => "darkslategrey",
            Color::DarkTurquoise => "darkturquoise",
            Color::DarkViolet => "darkviolet",
            Color::DeepPink => "deeppink",
            Color::DeepSkyBlue => "deepskyblue",
            Color::DimGray => "dimgray",
            Color::DimGrey => "dimgrey",
            Color::DodgerBlue => "dodgerblue",
            Color::FireBrick => "firebrick",
            Color::FloralWhite => "floralwhite",
            Color::ForestGreen => "forestgreen",
            Color::Fuchsia => "fuchsia",
            Color::Gainsboro => "gainsboro",
            Color::GhostWhite => "ghostwhite",
            Color::Gold => "gold",
            Color::GoldenRod => "goldenrod",
            Color::Gray => "gray",
            Color::Grey => "grey",
            Color::Green => "green",
            Color::GreenYellow => "greenyellow",
            Color::HoneyDew => "honeydew",
            Color::HotPink => "hotpink",
            Color::IndianRed => "indianred",
            Color::Indigo => "indigo",
            Color::Ivory => "ivory",
            Color::Khaki => "khaki",
            Color::Lavender => "lavender",
            Color::LavenderBlush => "lavenderblush",
            Color::LawnGreen => "lawngreen",
            Color::LemonChiffon => "lemonchiffon",
            Color::LightBlue => "lightblue",
            Color::LightCoral => "lightcoral",
            Color::LightCyan => "lightcyan",
            Color::LightGoldenRodYellow => "lightgoldenrodyellow",
            Color::LightGray => "lightgray",
            Color::LightGrey => "lightgrey",
            Color::LightGreen => "lightgreen",
            Color::LightPink => "lightpink",
            Color::LightSalmon => "lightsalmon",
            Color::LightSeaGreen => "lightseagreen",
            Color::LightSkyBlue => "lightskyblue",
            Color::LightSlateGray => "lightslategray",
            Color::LightSlateGrey => "lightslategrey",
            Color::LightSteelBlue => "lightsteelblue",
            Color::LightYellow => "lightyellow",
            Color::Lime => "lime",
            Color::LimeGreen => "limegreen",
            Color::Linen => "linen",
            Color::Magenta => "magenta",
            Color::Maroon => "maroon",
            Color::MediumAquaMarine => "mediumaquamarine",
            Color::MediumBlue => "mediumblue",
            Color::MediumOrchid => "mediumorchid",
            Color::MediumPurple => "mediumpurple",
            Color::MediumSeaGreen => "mediumseagreen",
            Color::MediumSlateBlue => "mediumslateblue",
            Color::MediumSpringGreen => "mediumspringgreen",
            Color::MediumTurquoise => "mediumturquoise",
            Color::MediumVioletRed => "mediumvioletred",
            Color::MidnightBlue => "midnightblue",
            Color::MintCream => "mintcream",
            Color::MistyRose => "mistyrose",
            Color::Moccasin => "moccasin",
            Color::NavajoWhite => "navajowhite",
            Color::Navy => "navy",
            Color::OldLace => "oldlace",
            Color::Olive => "olive",
            Color::OliveDrab => "olivedrab",
            Color::Orange => "orange",
            Color::OrangeRed => "orangered",
            Color::Orchid => "orchid",
            Color::PaleGoldenRod => "palegoldenrod",
            Color::PaleGreen => "palegreen",
            Color::PaleTurquoise => "paleturquoise",
            Color::PaleVioletRed => "palevioletred",
            Color::PapayaWhip => "papayawhip",
            Color::PeachPuff => "peachpuff",
            Color::Peru => "peru",
            Color::Pink => "pink",
            Color::Plum => "plum",
            Color::PowderBlue => "powderblue",
            Color::Purple => "purple",
            Color::RebeccaPurple => "rebeccapurple",
            Color::Red => "red",
            Color::RosyBrown => "rosybrown",
            Color::RoyalBlue => "royalblue",
            Color::SaddleBrown => "saddlebrown",
            Color::Salmon => "salmon",
            Color::SandyBrown => "sandybrown",
            Color::SeaGreen => "seagreen",
            Color::SeaShell => "seashell",
            Color::Sienna => "sienna",
            Color::Silver => "silver",
            Color::SkyBlue => "skyblue",
            Color::SlateBlue => "slateblue",
            Color::SlateGray => "slategray",
            Color::SlateGrey => "slategrey",
            Color::Snow => "snow",
            Color::SpringGreen => "springgreen",
            Color::SteelBlue => "steelblue",
            Color::Tan => "tan",
            Color::Teal => "teal",
            Color::Thistle => "thistle",
            Color::Tomato => "tomato",
            Color::Turquoise => "turquoise",
            Color::Violet => "violet",
            Color::Wheat => "wheat",
            Color::White => "white",
            Color::WhiteSmoke => "whitesmoke",
            Color::Yellow => "yellow",
            Color::YellowGreen => "yellowgreen",

            Color::Transparent => "transparent",
            Color::CurrentColor => "currentColor",

            Color::Rgb(r, g, b) => &format!("rgb({}, {}, {})", r, g, b),
            Color::Rgba(r, g, b, a) => &format!("rgba({}, {}, {}, {})", r, g, b, a),
            Color::Hsl(h, s, l) => &format!("hsl({}, {}%, {}%)", h, s, l),
            Color::Hsla(h, s, l, a) => &format!("hsla({}, {}%, {}%, {})", h, s, l, a),
            Color::Hex(hex) => hex,
            Color::Custom(s) => s,
        };
        write!(f, "{}", str)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_basic_colors() {
        assert_eq!(Color::Red.to_string(), "red");
        assert_eq!(Color::YellowGreen.to_string(), "yellowgreen");
        assert_eq!(Color::MediumSpringGreen.to_string(), "mediumspringgreen");
        assert_eq!(Color::Transparent.to_string(), "transparent");
    }

    #[test]
    fn test_color_codes() {
        assert_eq!(Color::Rgb(244, 10, 28).to_string(), "rgb(244, 10, 28)");
        assert_eq!(
            Color::Rgba(88, 0, 19, 0.8).to_string(),
            "rgba(88, 0, 19, 0.8)"
        );
    }

    #[test]
    fn test_custom() {
        assert_eq!(Color::Custom("red".to_string()).to_string(), "red");
    }
}
